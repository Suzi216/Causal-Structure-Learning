function(alg) {
  execution_times <- c()
  # Get a list of files in the "datapipipeline" directory
  files <- list.files("data/", pattern = "\\.csv$", full.names = TRUE)[order(as.numeric(sub("data/dag_(\\d+)_.*", "\\1", list.files("data/", pattern = "\\.csv$", full.names = TRUE))))]
  alg_name <- deparse(substitute(alg))
  
  # Loop through each file and perform some operation
  for (file in files) {
    
    # Read the CSV file
    data <- read.csv(file)
    # Convert to 0 and 1 
    adj_matrix_generated <- as.matrix(data) + 0
    data <- as.data.frame(adj_matrix_generated)
    
    set.seed(789)
    noise_sd = 0.05
    epsilon = 1e-6
    for (col in names(data)) {
      # Add a small constant to each original data point
      data[[col]] = data[[col]] + epsilon
      
      # Generate noise for each observation
      noise = rnorm(nrow(data), mean = 0, sd = abs(data[[col]]) * noise_sd)
      
      # Add the noise to the variable in the original data
      data[[col]] = data[[col]] + noise
    }
    
    # # Remove 5 % of the data sample 
    # rows_to_update <- sample(1:nrow(data), round(0.05 * nrow(data)))
    # data[rows_to_update, ] <- 0
    
    start_time <- Sys.time()
    # The generated graph
    pc_result <- alg(data)
    end_time <- Sys.time()
    
    execution_time <- end_time - start_time
    execution_times <- c(execution_times, as.numeric(execution_time))
    
    adj_matrix_generated <- amat(pc_result)
    
    # Convert 0 and 1 to TRUE and FALSE
    adj_matrix_generated <- adj_matrix_generated == 1
    
    # Extract file name (without path) for naming the output
    file_name <- tools::file_path_sans_ext(basename(file))
    
    # Save the adjacency matrix to a CSV file with a name based on the input file
    weights_filename <- paste("gen_data_incorrect_values/", alg_name, "/gen_", file_name, ".csv", sep = "")
    write.csv(adj_matrix_generated, weights_filename, row.names = FALSE)
    
    # Print a message indicating the processing is done for the current file
    cat("Processed file:", file, "\n")
  }
  return(execution_times)
  
}
